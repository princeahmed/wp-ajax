/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/frontend.js":
/*!*******************************!*\
  !*** ./assets/js/frontend.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _preload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./preload */ "./assets/js/preload.js");


(function ($) {
  var app = {
    preload: "<div id=\"wp-ajax-preload\" style=\"position: fixed;width: 100%;height: 100%;background: rgba(0,0,0, .5);display: flex;align-items: center;justify-content: center;z-index: 9999;\"><img src=\"".concat(wpAjax.plugin_url, "/assets/images/preload.gif\" style=\"width: 100px;\"></div>"),
    init: function init() {
      app.hidePreload();
      $(document).on('click', 'a:not([href^="#"])', app.handleClick);
    },

    /**
     * handle the link click
     *
     * @param e
     */
    handleClick: function handleClick(e) {
      var url = $(this).attr('href');

      if (app.isExternal(this)) {
        return;
      } else {
        if (url.includes('/wp-admin/')) {
          return;
        }

        e.preventDefault();
      }

      app.getPage(url);
    },

    /**
     * get the page content by ajax request
     *
     * @param url
     * @param replaceURL
     */
    getPage: function getPage(url) {
      var replaceURL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      app.showPreload();
      $.get(url, function (response) {
        response = response.replace(/(<[a-zA-Z]+>|.*?[^?]>)/, "$1 ".concat(app.preload));
        var newDoc = document.open("text/html", "replace");
        newDoc.write(response);
        newDoc.close();

        if (replaceURL) {
          app.replaceURL(url);
        }
      }).fail(function (error) {
        console.log(error);
        app.hidePreload();
        alert('Oops! AJAX Error');
      });
    },

    /**
     * Show ajax preloader image
     */
    showPreload: function showPreload() {
      if ($('#wp-ajax-preload', $(document)).length) {
        $('#wp-ajax-preload', $(document)).addClass('active');
      } else {
        $('body').prepend(app.preload);
      }
    },

    /**
     * hide ajax preloader image
     */
    hidePreload: function hidePreload() {
      $('#wp-ajax-preload').removeClass('active');
    },

    /**
     * check whether the link is external or not
     *
     * @param link
     * @returns {boolean}
     */
    isExternal: function isExternal(link) {
      return link.host !== window.location.host;
    },

    /**
     * replace browser url
     *
     * @param url
     */
    replaceURL: function replaceURL(url) {
      if (history.pushState) {
        var URL = url.replace(/^.*\/\/[^\/]+/, '');
        window.history.pushState('', '', URL);
      } else {
        document.location.href = url;
      }
    }
  };
  Object(_preload__WEBPACK_IMPORTED_MODULE_0__["default"])();
  app.hidePreload();
  $(document).ready(app.init);
  /**
   * handle browser back/ next navigation
   */

  onpopstate = function onpopstate() {
    var url = location.href;
    app.getPage(url, false);
  };
})(jQuery);

/***/ }),

/***/ "./assets/js/preload.js":
/*!******************************!*\
  !*** ./assets/js/preload.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var wpAjaxPreload = function wpAjaxPreload() {
  var maxRPS = 3;
  var delay = 0;
  var hoverDelay = 50;
  var ignoreKeywords = ['/wp-admin', '/wp-login.php', '/cart', '/checkout', 'add-to-cart', 'logout', '#', '?', '.png', '.jpeg', '.jpg', '.gif', '.svg', '.webp'];
  var toPrefetch = new Set();
  var alreadyPrefetched = new Set(); // Check browser support for native 'prefetch'

  var prefetcher = document.createElement("link");
  var isSupported = prefetcher.relList && prefetcher.relList.supports && prefetcher.relList.supports("prefetch") && window.IntersectionObserver && "isIntersecting" in IntersectionObserverEntry.prototype; // Checks if user is on slow connection or has enabled data saver

  var isSlowConnection = navigator.connection && (navigator.connection.saveData || (navigator.connection.effectiveType || "").includes("2g")); // Don't start preloading if user is on a slow connection or not supported

  if (isSlowConnection || !isSupported) return; // Prefetch the given url using native 'prefetch'. Fallback to 'xhr' if not supported

  var prefetch = function prefetch(url) {
    return new Promise(function (resolve, reject) {
      var link = document.createElement("link");
      link.rel = "prefetch";
      link.href = url;
      link.onload = resolve;
      link.onerror = reject;
      document.head.appendChild(link);
    });
  }; // Prefetch pages with a timeout


  var prefetchWithTimeout = function prefetchWithTimeout(url) {
    var timer = setTimeout(function () {
      return stopPreloading();
    }, 5000);
    prefetch(url)["catch"](function () {
      return stopPreloading();
    })["finally"](function () {
      return clearTimeout(timer);
    });
  };

  var addUrlToQueue = function addUrlToQueue(url) {
    var processImmediately = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (alreadyPrefetched.has(url) || toPrefetch.has(url)) return; // Prevent preloading 3rd party domains

    var origin = window.location.origin;
    if (url.substring(0, origin.length) !== origin) return; // Prevent current page from preloading

    if (window.location.href === url) return; // Ignore keywords in the array, if matched to the url

    for (var i = 0; i < ignoreKeywords.length; i++) {
      if (url.includes(ignoreKeywords[i])) return;
    } // If max RPS is 0 or is on mouse hover, process immediately (without queue)


    if (processImmediately) {
      prefetchWithTimeout(url);
      alreadyPrefetched.add(url);
    } else toPrefetch.add(url);
  }; // Observe the links in viewport, add url to queue if found intersecting


  var linksObserver = new IntersectionObserver(function (entries) {
    entries.forEach(function (entry) {
      if (entry.isIntersecting) {
        var url = entry.target.href;
        addUrlToQueue(url, !maxRPS);
      }
    });
  }); // Queue that process requests based on max RPS (requests per second)

  var startQueue = function startQueue() {
    return setInterval(function () {
      Array.from(toPrefetch).slice(0, maxRPS).forEach(function (url) {
        prefetchWithTimeout(url);
        alreadyPrefetched.add(url);
        toPrefetch["delete"](url);
      });
    }, 1000);
  };

  var hoverTimer = null; // Add URL to queue on mouse hover, after timeout

  var mouseOverListener = function mouseOverListener(event) {
    var elm = event.target.closest("a");

    if (elm && elm.href && !alreadyPrefetched.has(elm.href)) {
      hoverTimer = setTimeout(function () {
        addUrlToQueue(elm.href, true);
      }, hoverDelay);
    }
  }; // Preload on touchstart on mobile


  var touchStartListener = function touchStartListener(event) {
    var elm = event.target.closest("a");
    if (elm && elm.href && !alreadyPrefetched.has(elm.href)) addUrlToQueue(elm.href, true);
  }; // Clear timeout on mouse out if not already preloaded


  var mouseOutListener = function mouseOutListener(event) {
    var elm = event.target.closest("a");

    if (elm && elm.href && !alreadyPrefetched.has(elm.href)) {
      clearTimeout(hoverTimer);
    }
  }; // Fallback for requestIdleCallback https://caniuse.com/#search=requestIdleCallback


  var requestIdleCallback = window.requestIdleCallback || function (cb) {
    var start = Date.now();
    return setTimeout(function () {
      cb({
        didTimeout: false,
        timeRemaining: function timeRemaining() {
          return Math.max(0, 50 - (Date.now() - start));
        }
      });
    }, 1);
  }; // Stop preloading in case server is responding slow/errors


  var stopPreloading = function stopPreloading() {
    // Find all links are remove it from observer (viewport)
    document.querySelectorAll("a").forEach(function (e) {
      return linksObserver.unobserve(e);
    }); // Clear pending links in queue

    toPrefetch.clear(); // Remove event listeners for mouse hover and mobile touch

    document.removeEventListener("mouseover", mouseOverListener, true);
    document.removeEventListener("mouseout", mouseOutListener, true);
    document.removeEventListener("touchstart", touchStartListener, true);
  }; // Start Queue


  startQueue(); // Start preloading links in viewport on idle callback, with a delay

  requestIdleCallback(function () {
    return setTimeout(function () {
      return document.querySelectorAll("a").forEach(function (e) {
        return linksObserver.observe(e);
      });
    }, delay * 1000);
  }); // Add event listeners to detect mouse hover and mobile touch

  var listenerOptions = {
    capture: true,
    passive: true
  };
  document.addEventListener("mouseover", mouseOverListener, listenerOptions);
  document.addEventListener("mouseout", mouseOutListener, listenerOptions);
  document.addEventListener("touchstart", touchStartListener, listenerOptions);
};

/* harmony default export */ __webpack_exports__["default"] = (wpAjaxPreload);

/***/ }),

/***/ 0:
/*!*************************************!*\
  !*** multi ./assets/js/frontend.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\xampp\htdocs\wp-ajax\wp-content\plugins\wp-ajax\assets\js\frontend.js */"./assets/js/frontend.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,