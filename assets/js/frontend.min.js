/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/frontend.js":
/*!*******************************!*\
  !*** ./assets/js/frontend.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

;

(function ($) {
  var httpStatus = {
    100: "Continue",
    101: "Switching Protocols",
    102: "Processing",
    200: "OK",
    201: "Created",
    202: "Accepted",
    203: "Non-Authoritative Information",
    204: "No Content",
    205: "Reset Content",
    206: "Partial Content",
    207: "Multi-Status",
    208: "Already Reported",
    226: "IM Used",
    300: "Multiple Choices",
    301: "Moved Permanently",
    302: "Found",
    303: "See Other",
    304: "Not Modified",
    305: "Use Proxy",
    306: "Reserved",
    307: "Temporary Redirect",
    308: "Permanent Redirect",
    400: "Bad Request",
    401: "Unauthorized",
    402: "Payment Required",
    403: "Forbidden",
    404: "Not Found",
    405: "Method Not Allowed",
    406: "Not Acceptable",
    407: "Proxy Authentication Required",
    408: "Request Timeout",
    409: "Conflict",
    410: "Gone",
    411: "Length Required",
    412: "Precondition Failed",
    413: "Request Entity Too Large",
    414: "Request-URI Too Long",
    415: "Unsupported Media Type",
    416: "Requested Range Not Satisfiable",
    417: "Expectation Failed",
    422: "Unprocessable Entity",
    423: "Locked",
    424: "Failed Dependency",
    425: "Unassigned",
    426: "Upgrade Required",
    427: "Unassigned",
    428: "Precondition Required",
    429: "Too Many Requests",
    430: "Unassigned",
    431: "Request Header Fields Too Large",
    500: "Internal Server Error",
    501: "Not Implemented",
    502: "Bad Gateway",
    503: "Service Unavailable",
    504: "Gateway Timeout",
    505: "HTTP Version Not Supported",
    506: "Variant Also Negotiates (Experimental)",
    507: "Insufficient Storage",
    508: "Loop Detected",
    509: "Unassigned",
    510: "Not Extended",
    511: "Network Authentication Required"
  };
  var app = {
    preload: "<div class=\"wp-ajax-preload\" style=\"margin: -50px; position: fixed;z-index: 9999;display: flex;align-items: center;justify-content: center;width: 110%;height: 110%;background-color: rgba(0,0,0, .5);\"><img src=\"".concat(wpAjax.plugin_url, "/assets/images/preload.jpg\" style=\"width: 100px;\"></div>"),
    init: function init() {
      $(document).on('click', 'a:not([href^="#"])', app.handleClick);
    },
    handleClick: function handleClick(e) {
      if (app.isExternal(this)) {
        return;
      } else {
        e.preventDefault();
      }

      var url = $(this).attr('href');
      app.getPage(url);
    },
    getPage: function getPage(url) {
      var replaceURL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      app.showPreload();
      $.get(url).success(function (response) {
        response = response.replace(/(<[a-zA-Z]+>|.*?[^?]>)/, "$1 ".concat(app.preload));
        var newDoc = document.open("text/html", "replace");
        newDoc.write(response);
        newDoc.close();

        if (replaceURL) {
          app.replaceURL(url);
        }
      }).done(function () {
        app.hidePreload();
      }).fail(function (_ref) {
        var status = _ref.status;
        console.log(httpStatus[status]);
        alert('Oops! AJAX Error');
      });
    },
    showPreload: function showPreload() {
      if ($('.wp-ajax-preload', $(document)).length) {
        $('.wp-ajax-preload', $(document)).fadeIn(500);
      } else {
        $('body').prepend(app.preload);
      }
    },
    hidePreload: function hidePreload() {
      $('.wp-ajax-preload').fadeOut(500);
    },
    isExternal: function isExternal(link) {
      return link.host !== window.location.host;
    },
    replaceURL: function replaceURL(url) {
      if (history.pushState) {
        var URL = url.replace(/^.*\/\/[^\/]+/, '');
        window.history.pushState('', '', URL);
      } else {
        document.location.href = url;
      }
    }
  };
  $(document).ready(app.init);

  onpopstate = function onpopstate() {
    var url = location.href;
    app.getPage(url, false);
  };
})(jQuery);

/***/ }),

/***/ 0:
/*!*************************************!*\
  !*** multi ./assets/js/frontend.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\xampp\htdocs\wp-ajax\wp-content\plugins\wp-ajax\assets\js\frontend.js */"./assets/js/frontend.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,